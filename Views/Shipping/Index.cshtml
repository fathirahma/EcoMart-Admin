@using EcoMart.ViewModels
@model ShippingViewModel

@{
    ViewData["Title"] = "Shippings";
}

<!-- Navbar -->
<nav class="layout-navbar container-xxl navbar navbar-expand-xl navbar-detached align-items-center bg-navbar-theme"
     id="layout-navbar">
    <div class="layout-menu-toggle navbar-nav align-items-xl-center me-4 me-xl-0 d-xl-none">
        <a class="nav-item nav-link px-0 me-xl-6" href="javascript:void(0)">
            <i class="bx bx-menu bx-md"></i>
        </a>
    </div>
    <div class="navbar-nav-right d-flex align-items-center" id="navbar-collapse">
        <!-- Search -->
        <div class="navbar-nav align-items-center">
            <form asp-action="Index">
                <div class="nav-item d-flex align-items-center">
                    <i class="bx bx-search bx-md"></i>
                    <input asp-for="Term" type="text" name="term" class="form-control border-0 shadow-none ps-1 ps-sm-2" placeholder="Search..." autocomplete="off" />
                    <input type="hidden" asp-for="FilterBy" />
                </div>
            </form>
        </div>
        <!-- /Search -->
        <ul class="navbar-nav flex-row align-items-center ms-auto">
            <!-- User -->
            <li class="nav-item navbar-dropdown dropdown-user dropdown">
                <a class="nav-link dropdown-toggle hide-arrow p-0" href="javascript:void(0);" data-bs-toggle="dropdown">
                    <div class="avatar avatar-online">
                        <img src="../assets/img/avatars/1.png" alt class="w-px-40 h-auto rounded-circle" />
                    </div>
                </a>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="#">
                            <div class="d-flex">
                                <div class="flex-shrink-0 me-3">
                                    <div class="avatar avatar-online">
                                        <img src="../assets/img/avatars/1.png" alt class="w-px-40 h-auto rounded-circle" />
                                    </div>
                                </div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-0">@ViewBag.UserName</h6>
                                    <small class="text-muted">@ViewBag.Role</small>
                                </div>
                            </div>
                        </a>
                    </li>
                    <li>
                        <div class="dropdown-divider my-1"></div>
                    </li>
                    <li>
                        <span class="dropdown-item m-0 p-0">
                            <form asp-area="" asp-controller="Account" asp-action="Logout">
                                <button class="w-100 text-start" style="border: none; background: none; color: inherit; height: 38px;"><i class="bx bx-power-off bx-md me-3 ms-3"></i> Logout</button>
                            </form>
                        </span>
                    </li>
                </ul>
            </li>
            <!--/ User -->
        </ul>
    </div>
</nav>
<!--/ Navbar -->

<!-- Content wrapper -->
<div class="content-wrapper">
    <!-- Content -->
    <div class="container-xxl flex-grow-1 container-p-y">

        <div class="row">
            <div class="col-md-12">

                <div class="card mb-6">
                    <div class="card-body">
                        <div class="d-flex align-items-start align-items-sm-center gap-6 pb-4 justify-content-between">
                            <div class="button-wrapper">
                                <label class="badge bg-label-primary me-3 mb-4" style="cursor: default">
                                    <i class="bx bxs-truck"></i>
                                </label>
                                <span class="text-primary fw-bold">Shippings</span>
                            </div>
                            <div class="button-wrapper">
                                <a class="btn btn-primary btn-icon dropdown-toggle hide-arrow text-white mb-4" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class='bx bx-filter'></i>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="/Shipping/Index">None</a></li>
                                    <li><a class="dropdown-item" href="/Shipping/Index?filterBy=0">Not Delivered</a></li>
                                    <li><a class="dropdown-item" href="/Shipping/Index?filterBy=1">Delivered</a></li>
                                </ul>
                            </div>
                        </div>

                        <div class="row mb-4 g-3">
                            <div class="table-responsive text-nowrap">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th class="text-center">No</th>
                                            <th class="text-center">Order ID</th>
                                            <th>Shipping Cost</th>
                                            <th>Shipped Date</th>
                                            <th>Delivered Date</th>
                                            <th class="text-center">Delivered</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (TempData["NoData"] != null) {
                                            <tr>
                                                <td colspan="6" class="text-center">@TempData["NoData"]</td>
                                            </tr>
                                        }
                                        @{ int rowIndex = (Model.CurrentPage - 1) * Model.PageSize; }
                                        @foreach (var item in Model.Shippings) {
                                            rowIndex++;
                                            <tr>
                                                <td class="text-center">@rowIndex</td>
                                                <td class="text-center">@item.OrderId</td>
                                                <td>@item.ShippingCost.ToString("C0", new System.Globalization.CultureInfo("id-ID"))</td>
                                                <td>@(item.ShippedDate != null ? item.ShippedDate : "-")</td>
                                                <td>@(item.DeliveredDate != null ? item.DeliveredDate : "-")</td>
                                                <td class="text-center">
                                                    <button class="btn btn-sm btn-primary" onclick="confirmDelivery(@item.Id)" @(item.DeliveredDate != null || item.ShippedDate == null ? "disabled" : "")>
                                                        <i class="bx bx-package"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            @if (Model.TotalPages > 1) {
                                <div class="d-flex justify-content-end mt-6">
                                    <nav aria-label="Page navigation">
                                        <ul class="pagination">
                                            @if (Model.CurrentPage > 1) {
                                                <li class="page-item prev">
                                                    <a class="page-link" href="/Shipping/Index?currentPage=@(Model.CurrentPage-1)">
                                                        <i class="tf-icon bx bx-chevron-left bx-sm"></i>
                                                    </a>
                                                </li>
                                            }
                                            @for (int i = 1; i <= Model.TotalPages; i++) {
                                                @if (i == Model.CurrentPage) {
                                                    <li class="page-item active">
                                                        <a class="page-link" href="/Shipping/Index?currentPage=@i">@i</a>
                                                    </li>
                                                } else {
                                                    <li class="page-item">
                                                        <a class="page-link" href="/Shipping/Index?currentPage=@i">@i</a>
                                                    </li>
                                                }
                                            }
                                            @if (Model.CurrentPage < Model.TotalPages) {
                                                <li class="page-item next">
                                                    <a class="page-link" href="/Shipping/Index?currentPage=@(Model.CurrentPage+1)">
                                                        <i class="tf-icon bx bx-chevron-right bx-sm"></i>
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </nav>
                                </div>
                            }

                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>
    <!-- / Content -->
    <div class="content-backdrop fade"></div>
</div>
<!-- Content wrapper -->

@section Scripts {
    <script>
        function confirmDelivery(itemId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You want to mark this shipping as delivered?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes!",
                customClass: {
                    popup: 'custom-swal-popup'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/Shipping/UpdateDeliveredDate`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ id: itemId })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: "Delivered!",
                                text: "The shipping has been delivered.",
                                icon: "success",
                                customClass: {
                                    popup: 'custom-swal-popup'
                                }
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: data.message || "Failed to delivered the shipping.",
                                icon: "error",
                                customClass: {
                                    popup: 'custom-swal-popup'
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error delivering the shipping:', error);
                        Swal.fire({
                            title: "Error!",
                            text: "Failed to deliver the shipping.",
                            icon: "error",
                            customClass: {
                                popup: 'custom-swal-popup'
                            }
                        });
                    });
                }
            });
        }
    </script>
}