@using EcoMart.Data.Enum
@using EcoMart.ViewModels
@model OrderViewModel

@{
    ViewData["Title"] = "Orders";
}

<!-- Navbar -->
<nav class="layout-navbar container-xxl navbar navbar-expand-xl navbar-detached align-items-center bg-navbar-theme"
     id="layout-navbar">
    <div class="layout-menu-toggle navbar-nav align-items-xl-center me-4 me-xl-0 d-xl-none">
        <a class="nav-item nav-link px-0 me-xl-6" href="javascript:void(0)">
            <i class="bx bx-menu bx-md"></i>
        </a>
    </div>
    <div class="navbar-nav-right d-flex align-items-center" id="navbar-collapse">
        <!-- Search -->
        <div class="navbar-nav align-items-center">
            <form asp-action="Index">
                <input type="hidden" asp-for="FilterBy" />
                <div class="nav-item d-flex align-items-center">
                    <i class="bx bx-search bx-md"></i>
                    <input asp-for="Term" type="text" name="term" class="form-control border-0 shadow-none ps-1 ps-sm-2" placeholder="Search..." autocomplete="off" />
                </div>
            </form>
        </div>
        <!-- /Search -->
        <ul class="navbar-nav flex-row align-items-center ms-auto">
            <!-- User -->
            <li class="nav-item navbar-dropdown dropdown-user dropdown">
                <a class="nav-link dropdown-toggle hide-arrow p-0" href="javascript:void(0);" data-bs-toggle="dropdown">
                    <div class="avatar avatar-online">
                        <img src="../assets/img/avatars/1.png" alt="profile" class="w-px-40 h-auto rounded-circle" />
                    </div>
                </a>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item">
                            <div class="d-flex">
                                <div class="flex-shrink-0 me-3">
                                    <div class="avatar avatar-online">
                                        <img src="../assets/img/avatars/1.png" alt class="w-px-40 h-auto rounded-circle" />
                                    </div>
                                </div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-0">@ViewBag.UserName</h6>
                                    <small class="text-muted">@ViewBag.Role</small>
                                </div>
                            </div>
                        </a>
                    </li>
                    <li>
                        <div class="dropdown-divider my-1"></div>
                    </li>
                    <li>
                        <span class="dropdown-item m-0 p-0">
                            <form asp-area="" asp-controller="Account" asp-action="Logout">
                                <button class="w-100 text-start" style="border: none; background: none; color: inherit; height: 38px;"><i class="bx bx-power-off bx-md me-3 ms-3"></i> Logout</button>
                            </form>
                        </span>
                    </li>
                </ul>
            </li>
            <!--/ User -->
        </ul>
    </div>
</nav>
<!--/ Navbar -->

<!-- Content wrapper -->
<div class="content-wrapper">
    <!-- Content -->
    <div class="container-xxl flex-grow-1 container-p-y">

        <div class="row">
            <div class="col-md-12">

                <div class="card mb-6">
                    <div class="card-body">
                        <div class="d-flex align-items-start align-items-sm-center gap-6 pb-4 justify-content-between">
                            <div class="button-wrapper">
                                <label class="badge bg-label-primary me-3 mb-4">
                                    <i class="bx bx-cart"></i>
                                </label>
                                <span class="text-primary fw-bold">Orders</span>
                            </div>
                            <div class="button-wrapper">
                                <a class="btn btn-primary btn-icon dropdown-toggle hide-arrow text-white mb-4" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class='bx bx-filter'></i>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="/Order/Index">None</a></li>
                                    @foreach (var item in Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>()) {
                                        <li><a class="dropdown-item" href="/Order/Index?filterBy=@((int)item)">@item</a></li>
                                    }
                                </ul>
                            </div>
                        </div>

                        <div class="row mb-4 g-3">
                            <div class="table-responsive text-nowrap">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th class="text-center">No</th>
                                            <th class="text-center">Order ID</th>
                                            <th>Order Date</th>
                                            <th class="text-center">Order Status</th>
                                            <th>Total Amount</th>
                                            <th class="text-center">Payment Status</th>
                                            <th>Shipping Address</th>
                                            <th class="text-center">Detail</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (TempData["NoData"] != null) {
                                            <tr>
                                                <td colspan="8" class="text-center">@TempData["NoData"]</td>
                                            </tr>
                                        }
                                        @{ int rowIndex = (Model.CurrentPage - 1) * Model.PageSize; }
                                        @foreach (var item in Model.Orders) {
                                            rowIndex++;
                                            <tr>
                                                <td class="text-center">@rowIndex</td>
                                                <td class="text-center">@item.Id</td>
                                                <td>@item.OrderDate</td>
                                                <td class="text-center">
                                                    @{
                                                        string badgeClass = "";
                                                        switch (item.OrderStatus) {
                                                            case OrderStatus.Pending:
                                                                badgeClass = "pending";
                                                                break;
                                                            case OrderStatus.Shipped:
                                                                badgeClass = "bg-label-info";
                                                                break;
                                                            case OrderStatus.Delivered:
                                                                badgeClass = "bg-label-success";
                                                                break;
                                                            case OrderStatus.Cancelled:
                                                                badgeClass = "bg-label-danger";
                                                                break;
                                                            default:
                                                                badgeClass = "bg-label-secondary";
                                                                break;
                                                        }
                                                    }   
                                                    @if (badgeClass == "pending") {
                                                        <div class='btn-group w-100'>
                                                            <button type='button' class='btn btn-sm btn-warning dropdown-toggle' data-bs-toggle='dropdown' aria-expanded='false' @(item.PaymentStatus == PaymentStatus.Failed ? "disabled" : "")>@item.OrderStatus</button>
                                                            <ul class='dropdown-menu'>
                                                                <li>
                                                                    <a class='dropdown-item' href='javascript:void(0);' onclick="confirmStatusChange(@item.Id, 'Shipped')">Shipped</a>
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    } else {
                                                        <label class="badge btn-sm w-100 @badgeClass">
                                                            @item.OrderStatus
                                                        </label>
                                                    }
                                                </td>
                                                <td>@item.TotalAmount.ToString("C0", new System.Globalization.CultureInfo("id-ID"))</td>
                                                <td class="text-center">
                                                    @{
                                                        string badge = "";
                                                        switch (item.PaymentStatus) {
                                                            case PaymentStatus.Completed:
                                                                badge = "bg-label-success";
                                                                break;
                                                            case PaymentStatus.Failed:
                                                                badge = "bg-label-danger";
                                                                break;
                                                            default:
                                                                badge = "bg-label-secondary";
                                                                break;
                                                        }
                                                    }
                                                    <label class="badge btn-sm w-100 @badge">
                                                        @item.PaymentStatus
                                                    </label>
                                                </td>
                                                <td>@item.ShippingAddress</td>
                                                <td class="text-center">
                                                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#modalDetail" data-id="@item.Id"><i class='bx bx-detail'></i></button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            @if (Model.TotalPages > 1) {
                                <div class="d-flex justify-content-end mt-6">
                                    <nav aria-label="Page navigation">
                                        <ul class="pagination">
                                            @if (Model.CurrentPage > 1) {
                                                <li class="page-item prev">
                                                    <a class="page-link" href="/Order/Index?currentPage=@(Model.CurrentPage-1)">
                                                        <i class="tf-icon bx bx-chevron-left bx-sm"></i>
                                                    </a>
                                                </li>
                                            }
                                            @for (int i = 1; i <= Model.TotalPages; i++) {
                                                @if (i == Model.CurrentPage) {
                                                    <li class="page-item active">
                                                        <a class="page-link" href="/Order/Index?currentPage=@i">@i</a>
                                                    </li>
                                                } else {
                                                    <li class="page-item">
                                                        <a class="page-link" href="/Order/Index?currentPage=@i">@i</a>
                                                    </li>
                                                }
                                            }
                                            @if (Model.CurrentPage < Model.TotalPages) {
                                                <li class="page-item next">
                                                    <a class="page-link" href="/Order/Index?currentPage=@(Model.CurrentPage+1)">
                                                        <i class="tf-icon bx bx-chevron-right bx-sm"></i>
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </nav>
                                </div>
                            }

                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>
    <!-- / Content -->
    <div class="content-backdrop fade"></div>
</div>
<!-- Content wrapper -->

<!-- MODAL DETAIL -->
<div class="modal fade" id="modalDetail" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="button-wrapper">
                    <label class="badge bg-label-primary me-3">
                        <i class="bx bx-detail"></i>
                    </label>
                    <span class="text-primary fw-bold">Order Details</span>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="orderId"></p>
                <div class="table-responsive text-nowrap">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Product Name</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th>Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!--  -->
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <nav class="Page navigation">
                        <ul class="pagination">
                            <!--  -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- / MODAL DETAIL -->

@section Scripts {
    <script>
        function confirmStatusChange(orderId, newStatus) {
            Swal.fire({
                title: "Are you sure?",
                text: "You want to change the order status to shipped?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes!",
                customClass: {
                    popup: 'custom-swal-popup'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Order/ChangeStatus/' + orderId + '?newStatus=' + newStatus, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(response => response.json()) // Parse JSON response
                    .then(data => {
                        if (data.success) {  // Check success value from JSON response
                            Swal.fire({
                                title: "Shipped!",
                                text: "The order has been shipped.",
                                icon: "success",
                                customClass: {
                                    popup: 'custom-swal-popup'
                                }
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: data.message || "Failed to ship the order.",
                                icon: "error",
                                customClass: {
                                    popup: 'custom-swal-popup'
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error shipping the order:', error);
                        Swal.fire({
                            title: "Error!",
                            text: "Failed to ship the order.",
                            icon: "error",
                            customClass: {
                                popup: 'custom-swal-popup'
                            }
                        });
                    });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            var modalDetail = document.getElementById('modalDetail');

            modalDetail.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var orderId = button.getAttribute('data-id'); // get id
                event.preventDefault();
                // init first page
                document.getElementById('orderId').textContent = "Order ID : " + orderId;
                loadOrderDetails(orderId, 1);
            });

            function loadOrderDetails(orderId, page) {
                fetch('/OrderDetail/GetOrderDetail/' + orderId + '?page=' + page)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.details && data.details.length > 0) {
                        updateDetailTable(data.details, page, 15);
                        updatePagination(data.currentPage, data.totalPages, orderId);
                    } else {
                        updateDetailTable([], page, 15, true);
                        clearPagination();
                    }

                    var bootstrapModal = new bootstrap.Modal(modalDetail);
                    bootstrapModal.show();
                })
                .catch(error => {
                    console.error('Error fetching order detail data:', error);
                    Swal.fire({
                        title: "Oops...",
                        text: 'Failed to retrieve order detail data. Please try again!',
                        icon: "error",
                        customClass: {
                            popup: 'custom-swal-popup'
                        }
                    });
                    event.preventDefault();
                });
            }

            function updateDetailTable(details, currentPage, pageSize, noData = false) {
                var tableBody = document.querySelector('#modalDetail tbody');
                tableBody.innerHTML = ''; // empty tbody

                if (noData) {
                    var row = `<tr>
                                <td colspan="5" class="text-center">No data has been found</td>
                            </tr>`;
                    tableBody.insertAdjacentHTML('beforeend', row);
                    return;
                }

                var rowIndex = (currentPage - 1) * pageSize + 1;

                details.forEach(function (item, index) {
                    var row = `<tr>
                            <td>${rowIndex + index}</td>
                            <td>${item.product.productName}</td>
                            <td>${item.quantity}</td>
                            <td>${item.price.toLocaleString('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 })}</td>
                            <td>${item.subTotal.toLocaleString('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 })}</td>
                        </tr>`;
                    tableBody.insertAdjacentHTML('beforeend', row);
                });
            }

            function updatePagination(currentPage, totalPages, orderId) {
                var paginationHtml = '';

                if (totalPages <= 1) {
                    clearPagination();
                    return;
                }

                if (currentPage > 1) {
                    paginationHtml += `<li class="page-item">
                                    <a class="page-link" href="javascript:void(0)" onclick="loadOrderDetails(${orderId}, ${currentPage - 1})"><i class="tf-icon bx bx-chevron-left bx-sm"></i></a>
                                </li>`;
                }

                for (var i = 1; i <= totalPages; i++) {
                    var activeClass = (i === currentPage) ? 'active' : '';
                    paginationHtml += `<li class="page-item ${activeClass}">
                                        <a class="page-link" href="javascript:void(0)" onclick="loadOrderDetails(${orderId}, ${i})">${i}</a>
                                    </li>`;
                }

                if (currentPage < totalPages) {
                    paginationHtml += `<li class="page-item">
                                    <a class="page-link" href="javascript:void(0)" onclick="loadOrderDetails(${orderId}, ${currentPage + 1})"><i class="tf-icon bx bx-chevron-right bx-sm"></i></a>
                                </li>`;
                }

                document.querySelector('#modalDetail .pagination').innerHTML = paginationHtml;
            }

            function clearPagination() {
                document.querySelector('#modalDetail .pagination').innerHTML = '';
            }
            //
            window.loadOrderDetails = loadOrderDetails;
        });

        document.getElementById('modalDetail').addEventListener('hidden.bs.modal', function () {
            var tableBody = document.querySelector('#modalDetail tbody');
            tableBody.innerHTML = '';
        });
    </script>
}